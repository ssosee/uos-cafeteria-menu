## Default Setting
name: Java CI with Gradle

on: # on : 어떤 조건에서 이 workflow를 실행할 것인지 컨디션
  push:
   branches:
     - main

env:
  AWS_REGION: ap-northeast-2

# permissions : 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read


## 실제로 실행될 내용 정의
jobs:
  build:
    # runs-on : github action의 CI서버 runner가 어떤 환경을 갖출지 고르는 것, ubuntu-latest : ubuntu 최신 버전에서 script를 실행
    runs-on: ubuntu-latest
    steps: # 처리할 일들을 순서대로 하나씩 정의

    # checkout : 지정한 저장소(현재 REPO)에서 코드를 runner 워크플로우 환경으로 가져오도록 하는 github action
    - name: checkout
      uses: actions/checkout@v3

    # open jdk 11 버전 환경을 세팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'corretto'

    ## 환경파일 작성 : github에 올리지 못하는 정보의 설정파일을 runner에 삽입하는 것
    ## 필요없어서 작성 안 함
    # ## create application-database.yaml
    - name: make application-secret.yml
      run: |
         ## create application-prod.yml
         cd ./src/main/resources

         # application-database.yaml 파일 생성
         touch ./application-prod.yml
         touch ./application-api-key.yml
         touch ./application-sentry.yml

         # GitHub-Actions 에서 설정한 값을 application-prod.yaml 파일에 쓰기
         echo "${{ secrets.PROD }}" >> ./application-prod.yml
         echo "${{ secrets.API_KEY }}" >> ./application-api-key.yml
         echo "${{ secrets.SENTRY }}" >> ./application-sentry.yml
      shell: bash

    ## gradle build
    # - name: Build with Gradle
    #   run: ./gradlew build
    # gradle을 통해 소스를 빌드.
    - name: Build with Gradle
      run: |
          ls -al
          chmod +x ./gradlew
          ./gradlew build

    # 원하는 버전을 수동으로 설정
    - name: Get version from Dockerfile
      id: get-version
      run: echo "::set-output name=VERSION::$(grep -oP '(?<=ENV APP_VERSION=).+' Dockerfile | tr -d '\r')"

    ## 웹 이미지 빌드 및 도커허브에 push
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ steps.get-version.outputs.VERSION }} --platform linux/amd64 .
        docker images
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ steps.get-version.outputs.VERSION }}


    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.3
      
    ## docker compose up
    ## appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행
    # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다. 
    # 실행 시, docker-compose를 사용합니다.

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}


    # Add GitHub ip to AWS (7)
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32

    # AWS EC2 Server Connect & Docker 명령어 실행 (8)
    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ec2-user
        password: ${{ secrets.AWS_EC2_PASSWORD }}
        port: ${{ secrets.EC2_SSH_PORT }}
        # key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 60s
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ steps.get-version.outputs.VERSION }}
          sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ steps.get-version.outputs.VERSION }}
          sudo docker image prune -f

    # REMOVE GitHub IP FROM security group (9)
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
